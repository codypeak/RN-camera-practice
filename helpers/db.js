import * as SQLite from 'expo-sqlite';

const db = SQLite.openDatabase('places.db');

export const init = () => { //initializes db table
    const promise = new Promise((resolve, reject) => {
        db.transaction((tx) => { //wrap every query in transaction to prevent db from being corrupted bc it allows you to rollback query. 
            tx.executeSql('CREATE_TABLE IF NOT EXISTS places (id INTEGER PRIMARY KEY NOT NULL, title TEXT NOT NULL, imageUri TEXT NOT NULL, address TEXT NOT NULL, lat REAL NOT NULL, lng REAL NOT NULL);', 
            [],  //id autogenerated
            () => {
                resolve(); //success case
            },
            (_, err) => { //1st arg not needed.
                reject(err); //error case
            }
            );
        });
    });
    return promise;
};

export const insertPlace = (title, imageUri, address, lat, lng) => {
    const promise = new Promise((resolve, reject) => {
        db.transaction(tx => { 
            tx.executeSql(
                'INSERT_INTO places (title, imageUri, address, lat, lng) VALUES (?, ?, ?, ?, ?)', 
                [title, imageUri, address, lat, lng], //fill in values here and validating them so cant be injection attacked.
                (_, result) => {
                    resolve(result);
                },
                (_, err) => {
                    reject(err);
                }
            );
        });
    });
    return promise;
};

export const fetchPlaces = () => {
    const promise = new Promise((resolve, reject) => {
        db.transaction(tx => { 
            tx.executeSql(
                'SELECT * FROM places', 
                [], 
                (_, result) => {
                    resolve(result);
                },
                (_, err) => {
                    reject(err);
                }
            );
        });
    });
    return promise;
};